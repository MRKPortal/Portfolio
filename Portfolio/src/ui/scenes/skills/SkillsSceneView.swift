//Generated by MRKPortal Yggdrasil

import SwiftUI

struct SkillsSceneView<P: SkillsScenePresenterProtocol>: View {
    
    @ObservedObject private var presenter: P

    @State private var animateDetail: Bool = false
    @State private var selected: SkillEntity?
    @State private var start: CGPoint?
    
    init(_ presenter: P) {
        self.presenter = presenter
    }
    
    var body: some View {
        ZStack {
            GeometryReader { reader in
                HiveView { index, pos in
                    let skill = presenter.skills[secured: index]
                    SkillCellView(skill)
                        .frame(size: .s(reader.size.width/2))
                        .scaleEffect(2/3)
                        .opacity(selected != nil && selected == skill ? 0 : 1)
                        .onTapGesture {
                            if skill == nil { return }
                            selected = skill
                            start = pos * (reader.size.width/3)
                            print(pos * (reader.size.width/3))
                            print(pos * (-reader.size.width/3))
                        }
                }
                .gestureRouter(directions: [.right]) { _ in
                    presenter.didTapBack()
                }
                
                Color
                    .black
                    .ignoresSafeArea()
                    .opacity(selected == nil ? 0 : 0.3)
                    .animation(.easeIn, value: selected)
                    .onTapGesture {
                        selected = nil
                    }
                
                if let selected, let start {
                    GeometryReader { reader in
                        SkillDetailView(skill: selected)
                            .offset(y: animateDetail ? 0 : reader.size.height/2 - 32)
                            .scaleEffect(animateDetail ? 1 : 2/3)
                            .offset(y: animateDetail ? 0 : -reader.size.width/6)
                            .offset(animateDetail ? .zero : start.toSize)
                            .onAppear {
                                withAnimation {
                                    animateDetail.toggle()
                                }
                            }
                            .onDisappear {
                                withAnimation {
                                    animateDetail.toggle()
                                }
                            }
                            .onTapGesture {
                                self.selected = nil
                            }
                    }
                }
            }
        }
    }
}

private extension SkillsSceneView {

//    func calculateOffset(hiveSide: CGFloat, selected: CGPoint, detailSize: CGSize) -> CGSize {
//        if animateDetail {
//            return .zero
//        } else {
//            return CGSize(
//                width: selected.x * hiveSide,
//                height: (detailSize.height - hiveSide)/2 - (64/3) + (selected.y * hiveSide)
//            )
//        }
//    }
}
