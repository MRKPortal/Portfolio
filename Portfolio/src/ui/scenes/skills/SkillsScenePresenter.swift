//Generated by MRKPortal Yggdrasil

import Foundation

protocol SkillsScenePresenterProtocol: ObservableObject {
    var skills: [SkillEntity] { get }
//    var distributor: DistributorProtocol { get }

    func didTapBack()
}

final class SkillsScenePresenter: SkillsScenePresenterProtocol {

	private let interactor: SkillsSceneInteractorProtocol
	private let router: SkillsSceneRouterProtocol

    @Published var skills: [SkillEntity] = []
    
//    let distributor: DistributorProtocol
    
	init(_ interactor: SkillsSceneInteractorProtocol, router: SkillsSceneRouterProtocol) {
		self.interactor = interactor
		self.router = router
//        self.distributor = HiveDistributor(5, horizontalLimit: 2)
        fetchSkills()
	}

    func didTapBack() {
        router.pop()
    }

    func fetchSkills() {
        Task { @MainActor in
            do {
                skills = try await interactor.fetchSkills()
            } catch {

            }
        }
    }
}

