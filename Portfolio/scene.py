import os
import shutil
import sys

from string import Template

def baseInit():
	return """
	init() {

	}
"""

def routerInit():
	return """
    private let injector: ServicesInjectorProtocol
    private let coordinator: NavigationCoordinator

    init(_ injector: ServicesInjectorProtocol, coordinator: NavigationCoordinator) {
        self.injector = injector
        self.coordinator = coordinator
    }
"""

def interactorInit():
	return """
	init(_ injector: ServicesInjectorProtocol) {

    }
"""

def headerBase(library):
	return "//Generated by MRKTrace Yggdrasil\n\nimport " + library + "\n\n"

def templateBase(sceneName, member, init=baseInit(), library="Foundation"):
	className = sceneName + "Scene" + member
	protocolName = className + "Protocol"
	return headerBase(library) + "protocol " + protocolName + " {\n\n}\n\n" + "final class " + className + ": " + protocolName + " {\n" + init + "\n}\n\n"

def templateView(sceneName):
	return headerBase("SwiftUI") + Template("""struct ${name}SceneView<P: ${name}ScenePresenterProtocol>: View {

    private let presenter: P

    init(_ presenter: P) {
        self.presenter = presenter
    }

    var body: some View {
        Color.clear
    }
}
""").substitute(name=sceneName)
    
def presenterInit(sceneName):
	interactor = sceneName + "SceneInteractorProtocol"
	router = sceneName + "SceneRouterProtocol"
	return Template("""
	private let interactor: ${interactor}
	private let router: ${router}

	init(_ interactor: ${interactor}, router: ${router}) {
		self.interactor = interactor
		self.router = router
	}
""").substitute(interactor=interactor, router=router)

def factory(sceneName):
	return headerBase("SwiftUI") + Template("""final class ${name}SceneFactory: Factory {
    private lazy var router = ${name}SceneRouter(injector, coordinator: coordinator)
    private lazy var interactor = ${name}SceneInteractor(injector)
    private lazy var presenter = ${name}ScenePresenter(interactor, router: router)
    
    override func build() -> AnyView {
        AnyView(${name}SceneView(presenter))
    }
}
""").substitute(name= sceneName)

sceneName = sys.argv[1]
folder = sceneName.lower()

for root, subdirs, files in os.walk(os. getcwd()):
    for d in subdirs:
        if d == "scenes":
        	folder = root + "/scenes/" + folder

if os.path.isdir(folder):
	shutil.rmtree(folder)

os.mkdir(folder)

with open(folder + "/" + sceneName + "ScenePresenter.swift", "w+") as swift:
	swift.write(templateBase(sceneName, "Presenter", presenterInit(sceneName)))

with open(folder + "/" + sceneName + "SceneInteractor.swift", "w+") as swift:
	swift.write(templateBase(sceneName, "Interactor", interactorInit()))

with open(folder + "/" + sceneName + "SceneRouter.swift", "w+") as swift:
	swift.write(templateBase(sceneName, "Router", routerInit()))

with open(folder + "/" + sceneName + "SceneView.swift", "w+") as swift:
	swift.write(templateView(sceneName))

with open(folder + "/" + sceneName + "SceneFactory.swift", "w+") as swift:
	swift.write(factory(sceneName))


