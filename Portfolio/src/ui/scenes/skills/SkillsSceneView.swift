//Generated by MRKPortal Yggdrasil

import SwiftUI

struct SkillsSceneView<P: SkillsScenePresenterProtocol>: View {
    
    @ObservedObject private var presenter: P

    @State private var selected: SkillEntity?
    @State private var start: CGPoint?
    
    init(_ presenter: P) {
        self.presenter = presenter
    }
    
    var body: some View {
        ZStack {
            HiveView { index, pos in
                let skill = presenter.skills[secured: index]
                SkillCellView(skill)
                    .opacity(pos.isEqual(value: start) ? 0 : 1)
                    .onTapGesture {
                        if skill == nil { return }
                        selected = skill
                        start = pos
                    }
            }
            .gestureRouter(directions: [.right]) { _ in
                presenter.didTapBack()
            }

            Color
                .black
                .opacity(selected == nil ? 0 : 0.3)
                .animation(.easeIn, value: selected)
                .onTapGesture {
                    selected = nil
                }
        }
    }
}

private extension SkillsSceneView {
    

    //    var detailView: some View {
    //        GeometryReader { detail in
    //            DetailedContentView()
    //                .scaleEffect(animateDetail ? 1 : 2/3, anchor: .top)
    //                .offset(calculateOffset(hiveSide: side, selected: selected, detailSize: detail.size))
    //                .onTapGesture {
    //                    withAnimation(.spring(duration: 0.25)) {
    //                        self.animateDetail = false
    //                    }
    //                    withAnimation(.easeIn.delay(0.15)) {
    //                        self.selected = nil
    //                    }
    //                }
    //                .onAppear {
    //                    withAnimation(.bouncy(extraBounce: 0.1)) {
    //                        animateDetail.toggle()
    //                    }
    //                }
    //        }
    //        .zIndex(2)
    //    }
    
//    func calculateOffset(hiveSide: CGFloat, selected: CGPoint, detailSize: CGSize) -> CGSize {
//        if animateDetail {
//            return .zero
//        } else {
//            return CGSize(
//                width: selected.x * hiveSide,
//                height: (detailSize.height - hiveSide)/2 - (64/3) + (selected.y * hiveSide)
//            )
//        }
//    }
}
